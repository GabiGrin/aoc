// import { puzzleInput } from "../lib/lib";
import { assert } from "chai";
import { getTestCases } from "../runtime/lib/get-tests";
import { readInputFile } from "../runtime/lib/input-output-files";

const parseInput = (raw: string) => {
  const rows = raw.split("\n");

  const l = rows.length;

  const res = [];


  return rows.map(r => {
	return [r.slice(0, r.length / 2), r.slice(r.length  /2)]
  })

  while (rows.length) {
    res.push([rows.shift(), rows.shift()]);
  }
  return res;

  // return gridFromMatix(rows);
  // return rows;
};

export const solve = (raw: string): any => {
  const input = parseInput(raw);

  console.log(input);

  const score = (shared) => {
    const asci = shared.charCodeAt(0);

    let r = 0;
    if (shared.toLowerCase() === shared) {
      r = asci - "a".charCodeAt(0) + 1;
    } else {
      r = asci - "A".charCodeAt(0) + 26 + 1;
    }

    return r;
  };

  const findItem = (sacks) => {
    const uniq = (s) => {
      return Array.from(new Set(s.split("")));
    };
    // console.log(sacks);

    const uniques = sacks.map(uniq);

    const r = uniques.reduce((f, s) => {
      if (f) {
        console.log("returning");

        return f;
      }
      return s.find((item) => {
        return uniques.every((s) => s.includes(item));
      });
    }, null);
    return r;
  };

  // console.log({r});
  // return r;

  return input.reduce((total, sack) => {
    return total +  score(findItem(sack));
  }, 0);

//   const i1 = findItem(input[0]);
//   const i2 = findItem(input[1]);

//   console.log(i1);
//   console.log(i2);

  

//   return score(i1) + score(i2);
};

// for wallaby
describe("part 1 tests", () => {
  it("passes for case 1 if exists", () => {
    const case1 = getTestCases()[0];
    if (case1) {
      const actual = solve(case1.input);
      assert.equal(actual, case1.expected);
    } else {
      // no test case
    }
  });

  it("passes for case 2 if exists", () => {
    const case2 = getTestCases()[1];
    if (case2) {
      const actual = solve(case2.input);
      assert.equal(actual, case2.expected);
    } else {
      // no test case
    }
  });

  it("passes for case 3 if exists", () => {
    const case3 = getTestCases()[2];
    if (case3) {
      const actual = solve(case3.input);
      assert.equal(actual, case3.expected);
    } else {
      // no test case
    }
  });

  it("passes for case 4 if exists", () => {
    const case4 = getTestCases()[3];
    if (case4) {
      const actual = solve(case4.input);
      assert.equal(actual, case4.expected);
    } else {
      // no test case
    }
  });

  it("passes for case 5 if exists", () => {
    const case5 = getTestCases()[4];
    if (case5) {
      const actual = solve(case5.input);
      assert.equal(actual, case5.expected);
    } else {
      // no test case
    }
  });

  it("passes input if exists", () => {
    // const input = readInputFile();
    // const actual = solve(input);
    // console.log({actual});
  });
});
