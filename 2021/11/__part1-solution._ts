// import { puzzleInput } from "../lib/lib";
import {assert} from 'chai';
import { getTestCases } from '../runtime/lib/get-tests';
import { readInputFile } from '../runtime/lib/input-output-files';
import { allAdjacent, getCell, left, range, setCell } from './utils';

const parseInput = (raw: string) => {
	const rows = raw
		.split('\n')
		.map(n => n.trim())
		.filter((v) => !!v)
		.map(r => r.split('').map(Number))
		.reduce((grid, rows, y) => {
			return rows.reduce((grid, cell, x) => {
				return setCell({x, y}, cell, grid)
			}, grid);
		}, new Map());
	

	return rows;
}

export const solve = (raw: string): any => {
	const input = parseInput(raw);


	let currGrid = input;
	let total = 0;
	range(0, 100).reduce((allFlashStep, step) => {


		const toInc = range(0, 10).reduce((all, x) => {
			const y = range(0, 10).map(y => ({x, y}));
			return [...all, ...y];
		}, [])

		let flashes = 0;

		while (toInc.length) {

			const {x, y} = toInc.pop();
			let val = getCell({x, y}, currGrid);

			setCell({x, y}, val + 1, currGrid);
			

			if (val === 9) {
				flashes++;

				const adj = allAdjacent
					.map(fn => fn({x, y}))
					.filter(({x, y}) => {
						const v = getCell({x, y}, currGrid);
						return v < 10 &&typeof v === 'number';
					})

				toInc.push(...adj);
				
			}

		}

		for (let x = 0; x < 10; x++) {
			for (let y = 0; y < 10; y++) {
				let val = getCell({x, y}, currGrid);
				


				if (val > 9) {
					setCell({x, y}, 0, currGrid);
				}
			}
		}

		if (!allFlashStep && flashes === 100) {
			return step;
		}
		total += flashes;

		return allFlashStep;


	}, 0);

	return total;
	

	return input.length;
};

// for wallaby
describe('part 1 tests', () => {
	it('passes for case 1 if exists', () => {
		const case1 = getTestCases()[0];
		if (case1) {
			const actual = solve(case1.input);			
			assert.equal(actual, case1.expected);
		} else {
			// no test case
		}
	});

	it('passes for case 2 if exists', () => {
		const case2 = getTestCases()[1];
		if (case2) {
			const actual = solve(case2.input);
			assert.equal(actual, case2.expected);
		} else {
			// no test case
		}
	});

	it('passes for case 3 if exists', () => {
		const case3 = getTestCases()[2];
		if (case3) {
			const actual = solve(case3.input);
			assert.equal(actual, case3.expected);
		} else {
			// no test case
		}
	});

	it('passes for case 4 if exists', () => {
		const case4 = getTestCases()[3];
		if (case4) {
			const actual = solve(case4.input);
			assert.equal(actual, case4.expected);
		} else {
			// no test case
		}
	});

	it('passes for case 5 if exists', () => {
		const case5 = getTestCases()[4];
		if (case5) {
			const actual = solve(case5.input);
			assert.equal(actual, case5.expected);
		} else {
			// no test case
		}
	});

	it('passes input if exists', () => {
		// const input = readInputFile();
		
		
		// const actual = solve(input);
		// console.log({actual});
	});
})
