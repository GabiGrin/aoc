// import { puzzleInput } from "../lib/lib";
import {assert} from 'chai';
import { getTestCases } from '../runtime/lib/get-tests';
import { readInputFile } from '../runtime/lib/input-output-files';

const parseInput = (raw: string) => {
	const rows = raw
		.split('\n')
		.map(n => n.trim())
		.filter((v) => !!v)

	return rows;
}

export const solve = (raw: string): any => {
	const input = parseInput(raw);

	const counts = input.reduce((acc, curr) => {
		curr.split('').forEach((c, i) => {
			const cb = acc.get(i) || {z: 0, o: 0};
			if (c === '0') {
				acc.set(i, {...cb, z: cb.z + 1})
			} else {
				acc.set(i, {...cb, o: cb.o + 1})
			}
		});
		return acc;

	}, new Map());

	console.log(counts);
	
	const mosts = Array.from(counts.entries()).reduce((a, [i, {z, o}]) => {
		if (z > o) {
			return a + '0';
		} else {
			return a + '1';
		}
	}, '')

	const leasts = Array.from(counts.entries()).reduce((a, [i, {z, o}]) => {
		if (z < o) {
			return a + '0';
		} else {
			return a + '1';
		}
	}, '')

	const gamma = parseInt(mosts, 2);
	const eps = parseInt(leasts, 2);

	return gamma * eps
	

	return input.length;
};

// for wallaby
describe('part 1 tests', () => {
	it('passes for case 1 if exists', () => {
		const case1 = getTestCases()[0];
		if (case1) {
			const actual = solve(case1.input);			
			assert.equal(actual, case1.expected);
		} else {
			// no test case
		}
	});

	it('passes for case 2 if exists', () => {
		const case2 = getTestCases()[1];
		if (case2) {
			const actual = solve(case2.input);
			assert.equal(actual, case2.expected);
		} else {
			// no test case
		}
	});

	it('passes for case 3 if exists', () => {
		const case3 = getTestCases()[2];
		if (case3) {
			const actual = solve(case3.input);
			assert.equal(actual, case3.expected);
		} else {
			// no test case
		}
	});

	it('passes for case 4 if exists', () => {
		const case4 = getTestCases()[3];
		if (case4) {
			const actual = solve(case4.input);
			assert.equal(actual, case4.expected);
		} else {
			// no test case
		}
	});

	it('passes for case 5 if exists', () => {
		const case5 = getTestCases()[4];
		if (case5) {
			const actual = solve(case5.input);
			assert.equal(actual, case5.expected);
		} else {
			// no test case
		}
	});

	it('passes input if exists', () => {
		// const input = readInputFile();
		
		
		// const actual = solve(input);
		// console.log({actual});
	});
})
