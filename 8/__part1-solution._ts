// import { puzzleInput } from "../lib/lib";
import {assert} from 'chai';
import { getTestCases } from '../runtime/lib/get-tests';
import { hasInputFile, readInputFile } from '../runtime/lib/input-output-files';

const parseInput = (raw: string) => {
	const rows = raw
		.split('\n')
		.map(n => n.trim())
		.filter((v) => !!v)
		.map(row => {

			const [input, output] = row.split(' | ');
			return {input: input.split(' '), output: output.split(' ')};
		});

	return rows;
}

export const solve = (raw: string): any => {
	const input = parseInput(raw);

	const map = {
		2:1, //1: 2, 
		4: 4,
		3: 7,//7: 3,
		7: 8//: 7
	}

	const countUnique = word => new Set([...word.split('')]).size

	return input.map(i => i.output)
		.reduce((acc, curr) => {

			console.log(acc, curr);

			const relevant = curr.filter(w => {
				const c = countUnique(w);
				console.log(w, c);
				
				return !!map[c];
			});

			console.log(relevant);
			
			
			return acc + relevant.length
		}, 0)
	

	return input.length;
};

// for wallaby
describe('part 1 tests', () => {
	it('passes for case 1 if exists', () => {
		const case1 = getTestCases()[0];
		if (case1) {
			const actual = solve(case1.input);			
			assert.equal(actual, case1.expected);
		} else {
			// no test case
		}
	});

	it('passes for case 2 if exists', () => {
		const case2 = getTestCases()[1];
		if (case2) {
			const actual = solve(case2.input);
			assert.equal(actual, case2.expected);
		} else {
			// no test case
		}
	});

	it('passes for case 3 if exists', () => {
		const case3 = getTestCases()[2];
		if (case3) {
			const actual = solve(case3.input);
			assert.equal(actual, case3.expected);
		} else {
			// no test case
		}
	});

	it('passes for case 4 if exists', () => {
		const case4 = getTestCases()[3];
		if (case4) {
			const actual = solve(case4.input);
			assert.equal(actual, case4.expected);
		} else {
			// no test case
		}
	});

	it('passes for case 5 if exists', () => {
		const case5 = getTestCases()[4];
		if (case5) {
			const actual = solve(case5.input);
			assert.equal(actual, case5.expected);
		} else {
			// no test case
		}
	});

	it('passes input if exists', () => {
		// const input = readInputFile();
		
		
		// const actual = solve(input);
		// console.log({actual});
	});
})
