// import { puzzleInput } from "../lib/lib";
import {assert} from 'chai';
import { getTestCases } from '../runtime/lib/get-tests';
import { readInputFile } from '../runtime/lib/input-output-files';
import { gridFromMatix, isDefined, range } from './utils';



const parseInput = (raw: string) => {
	const rows = raw
		.split('\n')
		.map(n => n.trim())
		.filter((v) => !!v)
		.map(r => {
			return r.split('').map(Number);
		})
		// .map(Number);
		// .map(v => v.split('').map(Number));

	return gridFromMatix(rows);
	// return rows;
}

export const solve = (raw: string): any => {
	const input = parseInput(raw);

	console.log(input);


	const width = input.width();
	const height = input.width();


	return input.reduce((count, val, pos, grid) => {

		const isVisibleLeft = range(0, pos.x).every((x) => {
			if (x === pos.x) return true;
			return grid.get({...pos, x}) < val;
		});

		const isVisibleRight = range(pos.x, width).every((x) => {
			if (x === pos.x) return true;
			const v = grid.get({...pos, x});
			if (!isDefined(v)) return true;
			return grid.get({...pos, x}) < val;
		});

		const isVisibleTop = range(0, pos.y).every((y) => {
			if (y === pos.y) return true;
			const v = grid.get({...pos, y});
			if (!isDefined(v)) return true;
			return grid.get({...pos, y}) < val;
		});

		const isVisibleBottom = range(pos.y, height).every((y) => {
			if (y === pos.y) return true;
			const v = grid.get({...pos, y});
			if (!isDefined(v)) return true;
			return grid.get({...pos, y}) < val;
		});

		const isVisible = isVisibleLeft || isVisibleRight || isVisibleBottom || isVisibleTop;

		return isVisible ? count + 1 : count;
		
	}, 0)
	

	// return input.length;
};

// for wallaby
describe('part 1 tests', () => {
	it('passes for case 1 if exists', () => {
		const case1 = getTestCases()[0];
		if (case1) {
			const actual = solve(case1.input);			
			assert.equal(actual, case1.expected);
		} else {
			// no test case
		}
	});

	it('passes for case 2 if exists', () => {
		const case2 = getTestCases()[1];
		if (case2) {
			const actual = solve(case2.input);
			assert.equal(actual, case2.expected);
		} else {
			// no test case
		}
	});

	it('passes for case 3 if exists', () => {
		const case3 = getTestCases()[2];
		if (case3) {
			const actual = solve(case3.input);
			assert.equal(actual, case3.expected);
		} else {
			// no test case
		}
	});

	it('passes for case 4 if exists', () => {
		const case4 = getTestCases()[3];
		if (case4) {
			const actual = solve(case4.input);
			assert.equal(actual, case4.expected);
		} else {
			// no test case
		}
	});

	it('passes for case 5 if exists', () => {
		const case5 = getTestCases()[4];
		if (case5) {
			const actual = solve(case5.input);
			assert.equal(actual, case5.expected);
		} else {
			// no test case
		}
	});

	it('passes input if exists', () => {
		// const input = readInputFile();
		
		
		// const actual = solve(input);
		// console.log({actual});
	});
})
